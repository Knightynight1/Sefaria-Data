#encoding=utf-8

import django
django.setup()
from sefaria.model import *
from sefaria.system.database import db
import re
from sources.local_settings import *
from sources.functions import post_sheet, http_request

GET_SERVER = "http://einmishpat.sandbox.sefaria.org"
POST_SERVER = "http://einmishpat.sandbox.sefaria.org"
def get_ssn(read_id):
    """
    gets a sheet id from a server and maps it to the correct ssn (using tags)
    :param read_id: Sheet id
    :return: ssn
    """
    map_get_id_ssn = {x: x for x in range(1478)}
    # map_get_id_ssn = {1216: 249, 1217: 248, 1218: 247, 1219: 246, 1220: 245, 1221: 244, 1222: 243, 1223: 242, 1224: 241, 1225: 240, 1226: 239, 1228: 238, 1229: 237, 1230: 236, 1231: 235, 1232: 234, 1233: 233, 1234: 232, 1235: 231, 1236: 230, 1237: 229, 1238: 228, 1239: 227, 1240: 226, 1241: 225, 1243: 224, 1244: 223, 1245: 222, 1246: 221, 1247: 220, 1248: 219, 1249: 218, 1250: 217, 1251: 216, 1252: 215, 1253: 214, 1254: 213, 1255: 212, 1256: 211, 1257: 210, 1258: 209, 1259: 208, 1260: 207, 1261: 206, 1262: 205, 1263: 204, 1264: 203, 1265: 202, 1266: 201, 1267: 200, 1268: 199, 1269: 198, 1270: 197, 1271: 196, 1272: 195, 1273: 194, 1274: 193, 1275: 192, 1276: 191, 1277: 190, 1278: 189, 1279: 188, 1280: 187, 1281: 186, 1282: 185, 1283: 184, 1284: 183, 1285: 182, 1286: 181, 1287: 180, 1288: 179, 1289: 178, 1290: 177, 1291: 176, 1292: 175, 1293: 174, 1294: 173, 1295: 172, 1296: 171, 1297: 170, 1298: 169, 1299: 168, 1300: 167, 1301: 166, 1302: 165, 1303: 164, 1304: 163, 1305: 162, 1306: 161, 1307: 160, 1308: 159, 1309: 158, 1310: 157, 1311: 156, 1312: 155, 1313: 154, 1314: 153, 1315: 152, 1316: 151, 1317: 150, 1318: 149, 1319: 148, 1320: 147, 1321: 146, 1322: 145, 1323: 144, 1324: 143, 1325: 142, 1326: 141, 1327: 140, 1328: 139, 1329: 138, 1330: 137, 1331: 136, 1332: 135, 1333: 134, 1334: 133, 1335: 132, 1336: 131, 1337: 130, 1338: 129, 1339: 128, 1340: 127, 1341: 126, 1342: 125, 1343: 124, 1344: 123, 1345: 122, 1346: 121, 1348: 120, 1349: 119, 1350: 118, 1351: 117, 1352: 116, 1353: 115, 1354: 114, 1355: 113, 1356: 112, 1357: 111, 1359: 110, 1360: 109, 1361: 108, 1362: 107, 1363: 106, 1364: 105, 1365: 104, 1366: 103, 1367: 102, 1368: 101, 1369: 100, 1370: 99, 1371: 98, 1372: 97, 1373: 96, 1374: 95, 1375: 94, 1376: 93, 1377: 92, 1378: 91, 1379: 90, 1380: 89, 1381: 88, 1382: 87, 1383: 86, 1384: 85, 1385: 84, 1386: 83, 1387: 82, 1388: 81, 1389: 80, 1390: 79, 1391: 78, 1392: 77, 1393: 76, 1394: 75, 1395: 74, 1396: 73, 1397: 72, 1398: 71, 1399: 70, 1400: 69, 1401: 68, 1402: 67, 1403: 66, 1404: 65, 1405: 64, 1406: 63, 1407: 62, 1408: 61, 1409: 60, 1410: 59, 1411: 58, 1412: 57, 1413: 56, 1414: 55, 1415: 54, 1416: 53, 1417: 52, 1418: 51, 1419: 50, 1420: 49, 1421: 48, 1422: 47, 1423: 46, 1424: 45, 1425: 44, 1426: 43, 1427: 42, 1428: 41, 1429: 40, 1430: 39, 1431: 38, 1432: 37, 1433: 36, 1434: 35, 1435: 34, 1436: 33, 1437: 32, 1438: 31, 1439: 30, 1440: 29, 1441: 28, 1442: 27, 1443: 26, 1444: 25, 1445: 24, 1446: 23, 1447: 22, 1448: 21, 1449: 20, 1450: 19, 1451: 18, 1452: 17, 1455: 16, 1456: 15, 1457: 14, 1458: 13, 1459: 12, 1461: 11, 1464: 10, 1465: 9, 1466: 8, 1467: 7, 1468: 6, 1469: 5, 1472: 4, 1473: 3, 1474: 2, 1478: 1
    # }  # this is a map id -> ssn in the server db we are copying from
    ssn = map_get_id_ssn.get(int(read_id), 0)
    return ssn

def get_post_id(ssn):
    """
    for the post server gets a ssn and returns the id to which the sheet should be connected. based on the ssn<->id mapping
    on the post server which we learn from the ssn tags
    :param ssn:
    :return:
    """
    map_post_ssn_id = {1: 1383, 2: 1382, 3: 1381, 4: 1380, 5: 1379, 6: 1378, 7: 1377, 8: 1376, 9: 1375, 10: 1374, 11: 1373, 12: 1372, 13: 1371, 14: 1370, 15: 1369, 16: 1368, 17: 1367, 18: 1366, 19: 1365, 20: 1364, 21: 1363, 22: 1362, 23: 1361, 24: 1360, 25: 1359, 26: 1358, 27: 1357, 28: 1356, 29: 1355, 30: 1354, 31: 1353, 32: 1352, 33: 1351, 34: 1350, 35: 1349, 36: 1348, 37: 1347, 38: 1346, 39: 1345, 40: 1344, 41: 1343, 42: 1342, 43: 1341, 44: 1340, 45: 1339, 46: 1338, 47: 1337, 48: 1336, 49: 1335, 50: 1334, 51: 1333, 52: 1332, 53: 1331, 54: 1330, 55: 1329, 56: 1328, 57: 1327, 58: 1326, 59: 1325, 60: 1324, 61: 1323, 62: 1322, 63: 1321, 64: 1320, 65: 1319, 67: 1318, 68: 1317, 70: 1316, 71: 1315, 72: 1314, 73: 1313, 74: 1312, 75: 1311, 76: 1310, 77: 1309, 78: 1308, 79: 1307, 80: 1306, 81: 1305, 82: 1304, 83: 1303, 84: 1302, 85: 1301, 86: 1300, 87: 1299, 88: 1298, 89: 1297, 90: 1296, 91: 1295, 92: 1294, 93: 1293, 94: 1292, 95: 1291, 96: 1290, 97: 1289, 98: 1288, 99: 1287, 100: 1286, 101: 1285, 102: 1284, 103: 1283, 104: 1282, 105: 1281, 106: 1280, 107: 1279, 108: 1278, 109: 1277, 110: 1276, 111: 1275, 112: 1274, 113: 1273, 114: 1272, 115: 1271, 116: 1270, 117: 1269, 118: 1268, 119: 1267, 120: 1266, 121: 1265, 122: 1264, 123: 1263, 124: 1262, 125: 1261, 126: 1260, 127: 1259, 128: 1258, 129: 1257, 130: 1256, 131: 1255, 132: 1254, 133: 1253, 134: 1252, 135: 1251, 136: 1250, 137: 1249, 138: 1248, 139: 1247, 140: 1246, 141: 1245, 142: 1244, 143: 1243, 144: 1242, 145: 1241, 146: 1240, 147: 1239, 148: 1238, 149: 1237, 150: 1236, 151: 1235, 152: 1234, 153: 1233, 154: 1232, 155: 1231, 156: 1230, 157: 1229, 158: 1228, 159: 1227, 160: 1226, 161: 1225, 162: 1224, 163: 1223, 164: 1222, 165: 1221, 166: 1220, 167: 1219, 168: 1218, 169: 1217, 170: 1216, 171: 1215, 172: 1214, 173: 1213, 174: 1212, 175: 1211, 176: 1210, 177: 1209, 178: 1208, 179: 1207, 180: 1206, 181: 1205, 182: 1204, 183: 1203, 184: 1202, 185: 1201, 186: 1200, 187: 1199, 188: 1198, 189: 1197, 190: 1196, 191: 1195, 192: 1194, 193: 1193, 194: 1192, 195: 1191, 196: 1190, 197: 1189, 198: 1188, 199: 1187, 200: 1186, 201: 1185, 202: 1184, 203: 1183, 204: 1182, 206: 1181, 281: 1180, 282: 1179, 283: 1178, 284: 1177, 285: 1176, 286: 1175, 287: 1174, 288: 1173, 289: 1172, 290: 1171, 291: 1170, 292: 1169, 293: 1168, 294: 1167, 295: 1166, 296: 1165, 297: 1164, 298: 1163, 299: 1162, 300: 1161, 301: 1160, 302: 1159, 303: 1158, 304: 1157, 305: 1156, 306: 1155, 307: 1154, 308: 1153, 309: 1152, 310: 1151, 311: 1150, 312: 1149, 313: 1148, 314: 1147, 315: 1146, 316: 1145, 317: 1144, 318: 1143, 319: 1142, 320: 1141, 321: 1140, 322: 1139, 323: 1138, 324: 1137, 325: 1136, 326: 1135, 327: 1134, 328: 1133, 329: 1132, 330: 1131, 331: 1130, 332: 1129, 333: 1128, 334: 1127, 335: 1126, 336: 1125, 337: 1124, 338: 1123, 339: 1122, 340: 1121, 341: 1120, 342: 1119, 343: 1118, 344: 1117, 345: 1116, 346: 1115, 347: 1114, 348: 1113, 349: 1112, 350: 1111, 351: 1110, 352: 1109, 353: 1108, 354: 1107, 355: 1106, 356: 1105, 357: 1104, 358: 1103, 359: 1102, 360: 1101, 361: 1100, 362: 1099, 363: 1098, 364: 1097, 365: 1096, 366: 1095, 367: 1094, 368: 1093, 369: 1092, 370: 1091, 371: 1090, 372: 1089, 373: 1088, 374: 1087, 375: 1086, 376: 1085, 377: 1084, 378: 1083, 379: 1082, 380: 1081, 381: 1080, 382: 1079, 383: 1078, 384: 1077, 385: 1076, 386: 1075, 387: 1074, 388: 1073, 389: 1072, 390: 1071, 391: 1070, 392: 1069, 393: 1068, 394: 1067, 395: 1066, 396: 1065, 397: 1064, 398: 1063, 399: 1062, 400: 1061, 401: 1060, 402: 1059, 403: 1058, 404: 1057, 405: 1056, 406: 1055, 407: 1054, 408: 1053, 409: 1052, 410: 1051, 411: 1050, 412: 1049, 413: 1048, 414: 1047, 415: 1046, 416: 1045, 417: 1044, 418: 1043, 419: 1042, 420: 1041, 421: 1040, 422: 1039, 423: 1038, 424: 1037, 425: 1036, 426: 1035, 427: 1034, 428: 1033, 429: 1032, 430: 1031, 431: 1030, 432: 1029, 433: 1028, 434: 1027, 435: 1026, 436: 1025, 437: 1024, 438: 1023, 439: 1022, 440: 1021, 441: 1020, 442: 1019, 443: 1018, 444: 1017, 445: 1016, 446: 1015, 447: 1014, 448: 1013, 449: 1012, 450: 1011, 451: 1010, 452: 1009, 453: 1008, 454: 1007, 455: 1006, 456: 1005, 457: 1004, 458: 1003, 459: 1002, 460: 1001, 461: 1000, 462: 999, 463: 998, 464: 997, 465: 996, 466: 995, 467: 994, 468: 993, 469: 992, 470: 991, 471: 990, 472: 989, 473: 988, 474: 987, 475: 986, 476: 985, 477: 984, 478: 983, 479: 982, 480: 981, 481: 980, 482: 979, 483: 978, 484: 977, 485: 976, 486: 975, 487: 974, 488: 973, 489: 972, 490: 971, 491: 970, 492: 969, 493: 968, 494: 967, 495: 966, 496: 965, 497: 964, 498: 963, 499: 962, 500: 961, 501: 960, 502: 959, 503: 958, 504: 957, 505: 956, 506: 955, 507: 954, 508: 953, 509: 952, 510: 951, 511: 950, 512: 949, 513: 948, 514: 947, 515: 946, 516: 945, 517: 944, 518: 943, 519: 942, 520: 941, 521: 940, 522: 939, 523: 938, 524: 937, 525: 936, 526: 935, 527: 934, 528: 933, 529: 932, 530: 931, 531: 930, 532: 929, 533: 928, 534: 927, 535: 926, 536: 925, 537: 924, 538: 923, 539: 922, 540: 921, 541: 920, 542: 919, 543: 918, 544: 917, 545: 916, 546: 915, 547: 914, 548: 913, 549: 912, 550: 911, 551: 910, 552: 909, 553: 908, 554: 907, 555: 906, 556: 905, 557: 904, 558: 903, 559: 902, 560: 901, 561: 900, 562: 899, 563: 898, 564: 897, 565: 896, 566: 895, 567: 894, 568: 893, 569: 892, 570: 891, 571: 890, 572: 889, 573: 888, 574: 887, 575: 886, 576: 885, 577: 884, 579: 883, 580: 882, 581: 881, 582: 880, 583: 879, 584: 878, 585: 877, 586: 876, 587: 875, 588: 874, 589: 873, 590: 872, 591: 871, 592: 870, 593: 869, 594: 868, 595: 867, 596: 866, 597: 865, 598: 864, 599: 863, 600: 862, 601: 861, 602: 860, 603: 859, 604: 858, 605: 857, 606: 856, 607: 855, 608: 854, 609: 853, 610: 852, 611: 851, 612: 850, 613: 849, 614: 848, 615: 847, 616: 846, 617: 845, 618: 844, 619: 843, 620: 842, 621: 841, 622: 840, 623: 839, 624: 838, 625: 837, 626: 836, 628: 835, 629: 834, 630: 833, 631: 832, 632: 831, 633: 830, 634: 829, 635: 828, 636: 827, 637: 826, 638: 825, 639: 824, 640: 823, 641: 822, 642: 821, 643: 820, 644: 819, 645: 818, 646: 817, 647: 816, 648: 815, 649: 814, 650: 813, 651: 812, 652: 811, 653: 810, 654: 809, 655: 808, 656: 807, 657: 806, 658: 805, 659: 804, 660: 803, 661: 802, 662: 801, 663: 800, 664: 799, 665: 798, 666: 797, 667: 796, 668: 795, 669: 794, 670: 793, 671: 792, 672: 791, 673: 790, 674: 789, 675: 788, 676: 787, 677: 786, 678: 785, 679: 784, 680: 783, 681: 782, 682: 781, 683: 780, 684: 779, 685: 778, 686: 777, 687: 776, 688: 775, 689: 774, 690: 773, 691: 772, 692: 771, 693: 770, 694: 769, 695: 768, 696: 767, 697: 766, 698: 765, 699: 764, 700: 763, 701: 762, 702: 761, 703: 760, 704: 759, 705: 758, 706: 757, 707: 756, 708: 755, 709: 754, 710: 753, 711: 752, 712: 751, 713: 750, 714: 749, 715: 748, 716: 747, 717: 746, 718: 745, 719: 744, 720: 743, 721: 742, 722: 741, 723: 740, 724: 739, 725: 738, 726: 737, 727: 736, 728: 735, 729: 734, 730: 733, 731: 732, 732: 731, 733: 730, 734: 729, 735: 728, 736: 727, 737: 726, 738: 725, 739: 724, 740: 723, 741: 722, 742: 721, 743: 720, 744: 719, 745: 718, 746: 717, 747: 716, 748: 715, 749: 714, 750: 713, 751: 712, 752: 711, 753: 710, 754: 709, 755: 708, 756: 707, 757: 706, 758: 705, 759: 704, 760: 703, 761: 702, 762: 701, 763: 700, 764: 699, 765: 698, 766: 697, 767: 696, 768: 695, 769: 694, 770: 693, 771: 692, 772: 691, 773: 690, 774: 689, 775: 688, 776: 687, 777: 686, 778: 685, 779: 684, 780: 683, 781: 682, 782: 681, 783: 680, 784: 679, 785: 678, 786: 677, 787: 676, 788: 675, 789: 674, 790: 673, 791: 672, 792: 671, 793: 670, 794: 669, 795: 668, 796: 667, 797: 666, 798: 665, 799: 664, 800: 663, 801: 662, 802: 661, 803: 660, 804: 659, 805: 658, 806: 657, 807: 656, 808: 655, 809: 654, 810: 653, 811: 652, 812: 651, 813: 650, 814: 649, 815: 648, 816: 647, 817: 646, 818: 645, 819: 644, 820: 643, 821: 642, 822: 641, 823: 640, 824: 639, 825: 638, 826: 637, 827: 636, 828: 635, 829: 634, 830: 633, 831: 632, 832: 631, 833: 630, 834: 629, 835: 628, 836: 627, 837: 626, 838: 625, 839: 624, 840: 623, 841: 622, 842: 621, 843: 620, 844: 619, 845: 618, 846: 617, 847: 616, 848: 615, 849: 614, 850: 613, 851: 612, 852: 611, 853: 610, 854: 609, 855: 608, 856: 607, 857: 606, 858: 605, 859: 604, 860: 603, 861: 602, 862: 601, 863: 600, 864: 599, 865: 598, 866: 597, 867: 596, 868: 595, 869: 594, 870: 593, 871: 592, 872: 591, 873: 590, 874: 589, 875: 588, 876: 587, 877: 586, 878: 585, 879: 584, 880: 583, 881: 582, 882: 581, 883: 580, 884: 579, 885: 578, 886: 577, 887: 576, 888: 575, 889: 574, 890: 573, 891: 572, 892: 571, 893: 570, 894: 569, 895: 568, 896: 567, 897: 566, 898: 565, 899: 564, 900: 563, 901: 562, 902: 561, 903: 560, 904: 559, 905: 558, 906: 557, 907: 556, 908: 555, 909: 554, 910: 553, 911: 552, 912: 551, 913: 550, 914: 549, 915: 548, 916: 547, 917: 546, 918: 545, 919: 544, 920: 543, 921: 542, 922: 541, 923: 540, 924: 539, 925: 538, 926: 537, 927: 536, 928: 535, 929: 534, 930: 533, 931: 532, 932: 531, 933: 530, 934: 529, 935: 528, 936: 527, 937: 526, 938: 525, 939: 524, 940: 523, 941: 522, 942: 521, 943: 520, 944: 519, 945: 518, 946: 517, 947: 516, 948: 515, 949: 514, 950: 513, 951: 512, 952: 511, 953: 510, 954: 509, 955: 508, 956: 507, 957: 506, 958: 505, 959: 504, 960: 503, 961: 502, 962: 501, 963: 500, 964: 499, 965: 498, 966: 497, 967: 496, 968: 495, 969: 494, 970: 493, 971: 492, 972: 491, 973: 490, 974: 489, 975: 488, 976: 487, 977: 486, 978: 485, 979: 484, 980: 483, 981: 482, 982: 481, 983: 480, 984: 479, 985: 478, 986: 477, 988: 476, 989: 475, 990: 474, 991: 473, 992: 472, 993: 471, 994: 470, 995: 469, 996: 468, 997: 467, 998: 466, 999: 465, 1000: 464, 1001: 463, 1002: 462, 1003: 461, 1004: 460, 1005: 459, 1006: 458, 1007: 457, 1008: 456, 1009: 455, 1010: 454, 1011: 453, 1012: 452, 1013: 451, 1014: 450, 1015: 449, 1016: 448, 1017: 447, 1018: 446, 1019: 445, 1020: 444, 1021: 443, 1022: 442, 1023: 441, 1024: 440, 1025: 439, 1026: 438, 1027: 437, 1028: 436, 1029: 435, 1030: 434, 1031: 433, 1032: 432, 1033: 431, 1034: 430, 1035: 429, 1036: 428, 1037: 427, 1038: 426, 1039: 425, 1040: 424, 1041: 423, 1042: 422, 1043: 421, 1044: 420, 1045: 419, 1046: 418, 1047: 417, 1048: 416, 1049: 415, 1050: 414, 1051: 413, 1052: 412, 1053: 411, 1054: 410, 1055: 409, 1056: 408, 1057: 407, 1058: 406, 1059: 405, 1060: 404, 1061: 403, 1062: 402, 1063: 401, 1064: 400, 1065: 399, 1066: 398, 1067: 397, 1068: 396, 1069: 395, 1070: 394, 1071: 393, 1072: 392, 1073: 391, 1074: 390, 1075: 389, 1076: 388, 1077: 387, 1078: 386, 1079: 385, 1080: 384, 1081: 383, 1082: 382, 1083: 381, 1084: 380, 1085: 379, 1086: 378, 1087: 377, 1088: 376, 1089: 375, 1090: 374, 1091: 373, 1092: 372, 1093: 371, 1094: 370, 1095: 369, 1096: 368, 1097: 367, 1098: 366, 1099: 365, 1100: 364, 1101: 363, 1102: 362, 1103: 361, 1104: 360, 1105: 359, 1106: 358, 1107: 357, 1108: 356, 1109: 355, 1110: 354, 1111: 353, 1112: 352, 1113: 351, 1114: 350, 1115: 349, 1116: 348, 1117: 347, 1118: 346, 1119: 345, 1120: 344, 1121: 343, 1122: 342, 1123: 341, 1124: 340, 1125: 339, 1126: 338, 1127: 337, 1128: 336, 1129: 335, 1130: 334, 1131: 333, 1132: 332, 1133: 331, 1134: 330, 1135: 329, 1136: 328, 1137: 327, 1138: 326, 1139: 325, 1140: 324, 1141: 323, 1142: 322, 1143: 321, 1144: 320, 1145: 319, 1146: 318, 1147: 317, 1148: 316, 1149: 315, 1150: 314, 1151: 313, 1152: 312, 1153: 311, 1154: 310, 1155: 309, 1156: 308, 1157: 307, 1158: 306, 1159: 305, 1160: 304, 1161: 303, 1162: 302, 1163: 301, 1164: 300, 1165: 299, 1166: 298, 1167: 297, 1168: 296, 1169: 295, 1170: 294, 1171: 293, 1172: 292, 1173: 291, 1174: 290, 1175: 289, 1176: 288, 1177: 287, 1178: 286, 1179: 285, 1180: 284, 1181: 283, 1182: 282, 1183: 281, 1184: 280, 1185: 279, 1186: 278, 1187: 277, 1188: 276, 1189: 275, 1190: 274, 1191: 273, 1192: 272, 1193: 271, 1194: 270, 1195: 269, 1196: 268, 1197: 267, 1198: 266, 1199: 265, 1200: 264, 1201: 263, 1202: 262, 1203: 261, 1204: 260, 1205: 259, 1206: 258, 1207: 257, 1208: 256, 1209: 255, 1210: 254, 1211: 253, 1212: 252, 1213: 251, 1214: 250, 1216: 249, 1217: 248, 1218: 247, 1219: 246, 1220: 245, 1221: 244, 1222: 243, 1223: 242, 1224: 241, 1225: 240, 1226: 239, 1228: 238, 1229: 237, 1230: 236, 1231: 235, 1232: 234, 1233: 233, 1234: 232, 1235: 231, 1236: 230, 1237: 229, 1238: 228, 1239: 227, 1240: 226, 1241: 225, 1243: 224, 1244: 223, 1245: 222, 1246: 221, 1247: 220, 1248: 219, 1249: 218, 1250: 217, 1251: 216, 1252: 215, 1253: 214, 1254: 213, 1255: 212, 1256: 211, 1257: 210, 1258: 209, 1259: 208, 1260: 207, 1261: 206, 1262: 205, 1263: 204, 1264: 203, 1265: 202, 1266: 201, 1267: 200, 1268: 199, 1269: 198, 1270: 197, 1271: 196, 1272: 195, 1273: 194, 1274: 193, 1275: 192, 1276: 191, 1277: 190, 1278: 189, 1279: 188, 1280: 187, 1281: 186, 1282: 185, 1283: 184, 1284: 183, 1285: 182, 1286: 181, 1287: 180, 1288: 179, 1289: 178, 1290: 177, 1291: 176, 1292: 175, 1293: 174, 1294: 173, 1295: 172, 1296: 171, 1297: 170, 1298: 169, 1299: 168, 1300: 167, 1301: 166, 1302: 165, 1303: 164, 1304: 163, 1305: 162, 1306: 161, 1307: 160, 1308: 159, 1309: 158, 1310: 157, 1311: 156, 1312: 155, 1313: 154, 1314: 153, 1315: 152, 1316: 151, 1317: 150, 1318: 149, 1319: 148, 1320: 147, 1321: 146, 1322: 145, 1323: 144, 1324: 143, 1325: 142, 1326: 141, 1327: 140, 1328: 139, 1329: 138, 1330: 137, 1331: 136, 1332: 135, 1333: 134, 1334: 133, 1335: 132, 1336: 131, 1337: 130, 1338: 129, 1339: 128, 1340: 127, 1341: 126, 1342: 125, 1343: 124, 1344: 123, 1345: 122, 1346: 121, 1348: 120, 1349: 119, 1350: 118, 1351: 117, 1352: 116, 1353: 115, 1354: 114, 1355: 113, 1356: 112, 1357: 111, 1359: 110, 1360: 109, 1361: 108, 1362: 107, 1363: 106, 1364: 105, 1365: 104, 1366: 103, 1367: 102, 1368: 101, 1369: 100, 1370: 99, 1371: 98, 1372: 97, 1373: 96, 1374: 95, 1375: 94, 1376: 93, 1377: 92, 1378: 91, 1379: 90, 1380: 89, 1381: 88, 1382: 87, 1383: 86, 1384: 85, 1385: 84, 1386: 83, 1387: 82, 1388: 81, 1389: 80, 1390: 79, 1391: 78, 1392: 77, 1393: 76, 1394: 75, 1395: 74, 1396: 73, 1397: 72, 1398: 71, 1399: 70, 1400: 69, 1401: 68, 1402: 67, 1403: 66, 1404: 65, 1405: 64, 1406: 63, 1407: 62, 1408: 61, 1409: 60, 1410: 59, 1411: 58, 1412: 57, 1413: 56, 1414: 55, 1415: 54, 1416: 53, 1417: 52, 1418: 51, 1419: 50, 1420: 49, 1421: 48, 1422: 47, 1423: 46, 1424: 45, 1425: 44, 1426: 43, 1427: 42, 1428: 41, 1429: 40, 1430: 39, 1431: 38, 1432: 37, 1433: 36, 1434: 35, 1435: 34, 1436: 33, 1437: 32, 1438: 31, 1439: 30, 1440: 29, 1441: 28, 1442: 27, 1443: 26, 1444: 25, 1445: 24, 1446: 23, 1447: 22, 1448: 21, 1449: 20, 1450: 19, 1451: 18, 1452: 17, 1455: 16, 1456: 15, 1457: 14, 1458: 13, 1459: 12, 1461: 11, 1464: 10, 1465: 9, 1466: 8, 1467: 7, 1468: 6, 1469: 5, 1472: 4, 1473: 3, 1474: 2, 1478: 1
                       }
    # map_post_ssn_id = {y: x for x, y in map_post_id_ssn.iteritems()}
    post_id = map_post_ssn_id.get(ssn, 0)
    return post_id

def get_sheets_from_get_server(list_get_sheet_ids, get_server_address):
    got_sheets = []
    for id in list_get_sheet_ids:
        url = get_server_address + "/api/sheets/{}".format(id)
        got = http_request(url, body={"apikey": API_KEY}, method="GET")
        got_sheets.append(got)
    return got_sheets
    
def link_sheet(sheet_json, post_id=None):
    """

    :param sheet_json: the guts of a sheet
    :param post_id: an option to post the sheet over a different sheet that is on the server and not back over the original
    :return: returns the new (fixed links for the server) sheet_json
    """
    if not post_id:
        post_id=sheet_json['id']

    for i, s in enumerate(sheet_json['sources']):
        compile = re.compile(u'/sheets/(?P<id>\d+)')  # (?:\.(?P<node>\d+))? # there is a proble, here. it returns/ or reads only the first see. ssn 911. id 552
        if 'outsideText' in s.keys():
            uni_outsidetext = unicode(s['outsideText'], encoding='utf8') if isinstance(s['outsideText'], str) else s[
                'outsideText']
            for match in re.finditer(compile, s['outsideText']):
                ssn = get_ssn(match.group("id"))  # this is the ssn of the sheet to connect to
                print ssn
                to_post_id = get_post_id(ssn)
                s['outsideText'] = re.sub(match.group("id"), str(to_post_id), s['outsideText'])
                print s['outsideText']
        elif 'outsideBiText' in s.keys():
            uni_outsidetext = unicode(s['outsideBiText']['he'], encoding='utf8') if isinstance(s['outsideBiText']['he'],
                                                                                               str) else \
                s['outsideBiText']['he']
            for match in re.finditer(compile, s['outsideBiText']):
                ssn = get_ssn(match.group("id"))  # this is the ssn of the sheet to connect to
                print ssn
                to_post_id = get_post_id(ssn)
                s['outsideBiText'] = re.sub(match.group("id"), str(to_post_id), s['outsideBiText'])
                print s['outsideBiText']
            # matched = re.search(compile, s['outsideBiText'])
            # if matched:
            #     ssn = get_ssn(matched.group("id"))
            #     to_post_id = get_post_id(ssn)
            #     new_link = re.sub(compile, u'/sheets/{}'.format(to_post_id), s['outsideText'])
            #     s['outsideBiText'] = re.sub(compile, u'/sheets/\g<id>', new_link)  # todo: check and then test this line
    del sheet_json['_id']
    sheet_json['id'] = post_id
    return sheet_json

if __name__ == "__main__":
    #use list of which sheets have links which has sheet title and sheet year and tags
    #for each sheet, get each segment and check if it has
    sheet_data = []
    # sheets = db.sheets.find({"tags": "UI"})
    compile = re.compile(u'/sheets/(?P<id>\d+)')  # (?:\.(?P<node>\d+))?
    sheets = get_sheets_from_get_server([1395], GET_SERVER)  # list_get_sheet_ids comes straight from mongo
    for sheet_json in sheets:
        link_sheet(sheet_json)  #, post_id=256)
        post_sheet(sheet_json, POST_SERVER)
    # for x in range(21, 1471, 10):
    #     sheets = get_sheets_from_get_server(range(x, x+10), GET_SERVER)  # list_get_sheet_ids comes straight from mongo
    #     for sheet_json in sheets:
    #         link_sheet(sheet_json)
    #         post_sheet(sheet_json, POST_SERVER)
    # # for title_year_tags in sheet_data:
    # #     title, year, tags = title_year_tags
    # #     sheet = db.sheets.find({"title": title, "summary": year, "tags": tags})
    # #     assert sheet, u"Couldn't find sheet {}".format(title)
    # #     for segment in sheet["sources"]:
    # #         text = segment["text"]["he"] if "text" in segment.keys() else segment["outsideText"]
    # #         for match in re.findall("^<a href.*?nechama.org.il/pages/.*?</a>", text):
    # #             text = text.replace(match, )



