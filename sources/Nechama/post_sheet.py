# -*- coding: utf-8 -*-
"""
Post a sheet form the local environment to a remote environment, using an API Key.
"""
import django
django.setup()
import urllib2
import requests
import regex as re
from sefaria.system.database import db
from sefaria.sheets import get_sheet
from sources.functions import post_sheet, http_request
from sources.local_settings import *


# GET_SERVER = "http://nechama.sandbox.sefaria.org"
# GET_SERVER = "http://qanechama.sandbox.sefaria.org"
# GET_SERVER = "http://localhost:8000"
# GET_SERVER = "http://mitzvotlinking.sandbox.sefaria.org"
# GET_SERVER = "http://shmuel.sandbox.sefaria.org"
GET_SERVER = "http://nechama.sandbox.sefaria.org"

# POST_SERVER = "http://nechama.sandbox.sefaria.org"
# POST_SERVER = "http://qanechama.sandbox.sefaria.org"
# POST_SERVER = "http://localhost:8000"
# POST_SERVER = "http://nechama.sandbox.sefaria.org"  # "https://www.sefaria.org"
# POST_SERVER = "http://einmishpat.sandbox.sefaria.org"
# POST_SERVER = "http://shmuel.sandbox.sefaria.org"
POST_SERVER = "https://www.sefaria.org"
# POST_SERVER = "http://mitzvotlinking.sandbox.sefaria.org"


get_server = GET_SERVER
post_server = POST_SERVER

no_pdf = [20, 55, 66, 69, 76, 99, 101, 109, 118, 119, 120, 160, 181, 182, 183, 187, 191, 205, 230, 250, 259, 261, 289, 298, 314, 353, 354, 365, 368, 392, 410, 411, 423, 425, 426, 463, 479, 482, 516, 544, 554, 571, 578, 594, 603, 607, 619, 620, 627, 638, 648, 662, 663, 677, 689, 696, 704, 708, 734, 737, 755, 757, 759, 762, 784, 797, 809, 814, 816, 829, 838, 857, 879, 884, 906, 908, 923, 941, 956, 957, 964, 987, 1015, 1030, 1059, 1117, 1119, 1136, 1145, 1153, 1164, 1195, 1204, 1220, 1242, 1263, 1347, 1404, 1416, 1432, 1439, 1442, 1453, 1454, 1460, 1462, 1463, 1464, 1465, 1468, 1470, 1471, 1473, 1474, 1475, 1476, 1477,1478]

def linking(json_sheet, post_id=None):
    if not post_id:
        post_id=json_sheet['id']
    json_sheet_str = str(json_sheet).replace(u'\\\\', u'')
    url = get_server + "/api/sheets/{}".format(post_id)
    got = http_request(url, body={"apikey": API_KEY}, method="GET")
    compile = re.compile(u'(?P<aref><a.*?/sheets.*?>(?P<text>.*?)</a>)')
    for match in re.finditer(compile, str(got)):
        json_sheet_str = re.sub(match.group('text'), match.group('aref'), json_sheet_str)
    return eval(json_sheet_str)

def change_sheet(this_sheet, del_tags=[], add_tags=[], pdf_action = ''):
    # deal with tags
    to_delete = []  # the list of tags to delete - so not to change the list while still iterating through it
    for tag in this_sheet[u'tags']:
        if isinstance(tag, int) or tag.isdigit():
            tag = str(tag).strip()
            # todo: deal with the pdf link
            # this_sheet['summary'] = this_sheet['summary'] + u" http://www.nechama.org.il/pdf/{}.pdf".format(tag)
            this_sheet["ssn"] = int(tag)
            if "int_tag" in del_tags:
                to_delete.append(tag)
                this_sheet['ssn'] = int(tag)
        if (tag in del_tags) or re.search(u'[א-ת]', tag):
            to_delete.append(tag) #this_sheet[u'tags'].remove(tag)
        if tag == 'Bilingual':
            add_tags.append('English')
            this_sheet['summary'] = this_sheet['summary'] + u'<br>Editing and additional translation of English by R. Francis Nataf'
        if tag == 'merged':
            add_tags.append('Merged')
    for tag in to_delete:
        this_sheet[u'tags'].remove(tag)
    this_sheet[u'tags'].extend(add_tags)
    # deal with owner todo: make this work also throw the api post
    this_sheet["status"] = "unlisted"
    # pdf_link_str = u"www.nechama.org.il/pdf/{}.pdf".format(this_sheet['ssn'])
    # this_sheet['sources'].insert(0,{'node': '0', 'outsideText':'<a href=\"{}\" target=\"_blank\">{}</a>'.format(pdf_link_str, pdf_link_str)})
    # this_sheet = linking(this_sheet)
    if pdf_action:
        this_sheet = add_pdf_link(this_sheet, action=pdf_action)
    # del this_sheet['_id']
    return this_sheet

def add_pdf_link(this_sheet, action="add"):
    if this_sheet['ssn'] in no_pdf:
        return this_sheet
    url = u"http://www.nechama.org.il/pdf/{}.pdf".format(this_sheet['ssn'])
    aref = u'''</br><a href="{}" target="_blank">see original ראה מקור</a>'''.format(url)
    if action =='add':
        if re.search(u'riginal', this_sheet['summary']):
            return this_sheet
        this_sheet['summary'] = this_sheet['summary'] + aref
    elif action == 'delete':
        this_sheet['summary'] = re.sub(u'<.*>', u'', this_sheet['summary'])
    elif action == 'change':
        this_sheet['summary'] = re.sub(u'see original ראה מקור', u'View Original צפה בגרסת המקור', this_sheet['summary'])
    return this_sheet




def post_btween_sandboxes(ssn=None, map_ssn_url_post=None, map_ssn_url_get=None, id=None, id_post=None, new_post = False, pdf_action="", repost_to_local = False):
    if not ssn and not id:
        print "missing either a ssn or an sheet_id of the sheet to be posted"
        return
    if ssn:
        try:
            assert map_ssn_url_get and map_ssn_url_post
        except AssertionError:
            print "if using ssn you must give the corresponding maps"
        try:
            if not new_post:
                post_sheet_id = map_ssn_url_post[ssn]  # the latest sheet with that ssn number we want to repost over
            get_sheet_id = map_ssn_url_get[ssn]  # can also be from a ssn mapping from the correct server the fixed sheet that was created (sometimes from the old sheet itself), need to know it
        except KeyError:
            return
    else:  # id - because if it is neither we returns already :)
        get_sheet_id = id
        if id_post:
            post_sheet_id = id_post
        else:
            post_sheet_id = id

    url = get_server + "/api/sheets/{}".format(get_sheet_id)
    got = http_request(url, body={"apikey": API_KEY}, method="GET")

    # got = linking(got, post_sheet_id)
    changed = change_sheet(got, add_tags=[], del_tags=["UI", 'int_tag', 'Hebrew Sheet', 'Bilingual', 'Edited', 'Linked', 'merged', 'QA', "Merged"], pdf_action=pdf_action)


    if new_post:
        del changed['id']
    else:
        changed['id'] = post_sheet_id
        # # delete sheet in post sheet number - note: when it is reposting the sheet will only be in this script RAM so always!!! have a backup
        # delete_url = post_server + "/api/sheets/{}/delete".format(post_sheet_id)
        # response = http_request(delete_url, body={"apikey": API_KEY})
        # if re.search("Sheet {} not found.".format(post_sheet_id), response):
        #     del changed['id']
    if repost_to_local:
        post_over_sheet = db.sheets.find_one({'id': post_sheet_id})
        changed['_id'] = post_over_sheet['_id']
        db.sheets.update({'_id': post_over_sheet["_id"]}, changed)
    else:
        del changed['_id']
        #post the copyed sheet in there
        response = post_sheet(changed, server=POST_SERVER)
        if isinstance(response, unicode) and re.search('error', response):
            with open(u"nopost.html", 'a') as f:
                writer = f.write(response)
## post them over themself (for the sheet to sheet linking process)

# sheets = [map_ssn_url[x] for x in ssn_sheets]
# for ssn in sheets_ssn:
#     got = get_sheet(sheet[u'id'])
#     url = SEFARIA_SERVER + "/api/sheets/{}".format(sheet_id)
#     got = http_request(url, body={"apikey": API_KEY}, method="GET")
#     changed = change_sheet(got, add_tags=[])
#     changed['id'] = post_ssn_map[ssn]
#     del changed['_id']
#     post_sheet(changed, server=SEFARIA_SERVER)
# pass
if __name__ == "__main__":
    # create this mapping on the GET_SERVER via map_ssn_url.py on the correct db
    map_post = {1: 160441, 2: 160442, 3: 160443, 4: 160444, 5: 160445, 6: 160446, 7: 160447, 8: 160448, 9: 160449, 10: 160450, 11: 160451, 12: 160452, 13: 160453, 14: 160454, 15: 160455, 16: 160456, 17: 160457, 18: 160458, 19: 160459, 20: 160460, 21: 160461, 22: 160462, 23: 160463, 24: 160464, 25: 160465, 26: 160466, 27: 162336, 28: 160467, 29: 160468, 30: 160469, 31: 160470, 32: 160471, 33: 160472, 34: 160473, 35: 162325, 36: 160474, 37: 160475, 38: 160476, 39: 160477, 40: 160478, 41: 160479, 42: 160480, 43: 160481, 44: 160482, 45: 162328, 46: 160483, 47: 160484, 48: 162330, 49: 160485, 50: 160486, 51: 162332, 52: 162333, 53: 162337, 54: 160487, 55: 160488, 56: 160489, 57: 160490, 58: 160491, 59: 160492, 60: 160493, 61: 160494, 62: 160495, 63: 160496, 64: 160497, 65: 160498, 67: 160499, 68: 160500, 70: 160501, 71: 160502, 72: 160503, 73: 160504, 74: 160505, 75: 160506, 76: 160507, 77: 160508, 78: 160509, 79: 160510, 80: 160511, 81: 160512, 82: 160513, 83: 160514, 84: 160515, 85: 160516, 86: 160517, 87: 160518, 88: 160519, 89: 160520, 90: 160521, 91: 160522, 92: 160523, 93: 160524, 94: 160525, 95: 160526, 96: 160527, 97: 160528, 98: 160529, 99: 160530, 100: 160531, 101: 160532, 102: 160533, 103: 160534, 104: 160535, 105: 160536, 106: 160537, 107: 160538, 108: 160539, 109: 160540, 110: 160542, 111: 160543, 112: 160544, 113: 160545, 114: 160546, 115: 162331, 116: 160547, 117: 160548, 118: 162335, 119: 160549, 120: 160550, 121: 160551, 122: 160552, 123: 160553, 124: 160554, 125: 160555, 126: 160556, 127: 160557, 128: 160558, 129: 160559, 130: 160560, 131: 160561, 132: 160562, 133: 160563, 134: 160564, 135: 160565, 136: 160566, 137: 160567, 138: 160568, 139: 160569, 140: 160570, 141: 160571, 142: 162329, 143: 160572, 144: 160573, 145: 160574, 146: 160575, 147: 160576, 148: 160577, 149: 160578, 150: 160579, 151: 160580, 152: 160581, 153: 160582, 154: 160583, 155: 160584, 156: 160585, 157: 160586, 158: 160587, 159: 160588, 160: 160589, 161: 160590, 162: 160591, 163: 160592, 164: 160593, 165: 160594, 166: 160595, 167: 160596, 168: 160597, 169: 162327, 170: 160598, 171: 160599, 172: 160600, 173: 160601, 174: 162334, 175: 160602, 176: 160603, 177: 160604, 178: 160605, 179: 160606, 180: 160607, 181: 160608, 182: 160609, 183: 160610, 184: 160611, 185: 160612, 186: 160613, 187: 160614, 188: 160615, 189: 160616, 190: 160617, 191: 160618, 192: 160619, 193: 160620, 194: 160621, 195: 160622, 196: 160623, 197: 160624, 198: 160625, 199: 160626, 200: 160627, 201: 160628, 202: 160629, 203: 160630, 204: 160631, 206: 160632, 207: 160633, 208: 160634, 209: 160635, 210: 160636, 211: 160637, 212: 160638, 213: 160639, 214: 160640, 215: 160641, 216: 160642, 217: 160643, 218: 160644, 219: 160645, 220: 160646, 221: 160647, 222: 160648, 223: 160649, 224: 160650, 225: 160651, 226: 160652, 227: 160653, 228: 160654, 229: 160655, 230: 160656, 231: 160657, 232: 160658, 233: 160659, 234: 160660, 235: 160661, 236: 160662, 237: 160663, 238: 160664, 239: 160665, 240: 160666, 241: 160667, 242: 160668, 243: 160669, 244: 160670, 245: 160671, 246: 162326, 247: 160672, 248: 160673, 249: 160674, 250: 160675, 251: 160676, 252: 160677, 253: 160678, 254: 160679, 255: 160680, 256: 160681, 257: 160682, 258: 160683, 259: 160684, 260: 160685, 261: 160686, 262: 160687, 263: 160688, 264: 160689, 265: 160690, 266: 160691, 267: 160692, 268: 160693, 269: 160694, 270: 160695, 271: 160696, 272: 160697, 273: 160698, 274: 160699, 275: 160700, 276: 160701, 277: 160702, 278: 160703, 279: 160704, 280: 160705, 281: 160706, 282: 160707, 283: 160708, 284: 160709, 285: 160710, 286: 160711, 287: 160712, 288: 160713, 289: 160714, 290: 160715, 291: 160716, 292: 160717, 293: 160718, 294: 160719, 295: 160720, 297: 160721, 298: 160722, 299: 160723, 300: 160724, 301: 160725, 302: 160726, 303: 160727, 304: 160728, 305: 160729, 306: 160730, 307: 160731, 308: 160732, 309: 160733, 310: 160734, 311: 160735, 312: 160736, 313: 160737, 314: 160738, 315: 160739, 316: 160740, 317: 160741, 318: 160746, 319: 160747, 320: 160748, 321: 160749, 322: 160750, 323: 160751, 324: 160752, 325: 160753, 326: 160754, 327: 160755, 328: 160756, 329: 160757, 330: 160758, 331: 160759, 332: 160760, 333: 160761, 334: 160762, 335: 160763, 336: 160764, 337: 160765, 338: 160766, 339: 160767, 340: 160768, 341: 160769, 342: 160770, 343: 160771, 344: 160772, 345: 160773, 346: 160774, 347: 160775, 348: 160776, 349: 160777, 350: 160778, 351: 160779, 352: 160785, 353: 160786, 354: 160787, 355: 160788, 356: 160789, 357: 160790, 358: 160791, 359: 160792, 360: 160793, 361: 160794, 362: 160795, 363: 160796, 364: 160797, 365: 160798, 366: 160799, 367: 160800, 368: 160801, 369: 160802, 370: 160803, 371: 160804, 372: 160805, 373: 160817, 374: 160818, 375: 160819, 376: 160820, 377: 160822, 378: 160823, 379: 160824, 380: 160825, 381: 160826, 382: 160827, 383: 160828, 384: 160829, 385: 160830, 386: 160831, 387: 160832, 388: 160833, 389: 160834, 390: 160835, 391: 160836, 392: 160837, 393: 160838, 394: 160839, 395: 160840, 396: 160841, 397: 160842, 398: 160843, 399: 160844, 400: 160845, 401: 160846, 402: 160847, 403: 160848, 404: 160849, 405: 160850, 406: 160851, 407: 160852, 408: 160853, 409: 160854, 410: 160855, 411: 160856, 412: 160857, 413: 160858, 414: 160859, 415: 160860, 416: 160861, 417: 160862, 418: 161071, 419: 161072, 420: 161073, 421: 161074, 422: 161075, 423: 161076, 424: 161077, 425: 161078, 426: 161079, 427: 161080, 428: 161081, 429: 161082, 430: 161083, 431: 161084, 432: 161085, 433: 161086, 434: 161087, 435: 161088, 436: 161089, 437: 161090, 438: 161091, 439: 161092, 440: 161093, 441: 161094, 442: 161095, 443: 161096, 444: 161097, 445: 161098, 446: 161099, 447: 161100, 448: 161101, 449: 161102, 450: 161103, 451: 161104, 452: 161105, 453: 161106, 454: 161107, 455: 161108, 456: 161109, 457: 161110, 458: 161111, 459: 161112, 460: 161113, 461: 161114, 462: 161115, 463: 161116, 464: 161117, 465: 161118, 466: 161119, 467: 161120, 468: 161121, 469: 161122, 470: 161123, 471: 161124, 472: 161125, 473: 161126, 474: 161127, 475: 161128, 476: 161129, 477: 161130, 478: 161131, 479: 161132, 480: 161133, 481: 161134, 482: 161135, 483: 161136, 484: 161137, 485: 161138, 486: 161139, 487: 161140, 488: 161141, 489: 161142, 490: 161143, 491: 161144, 492: 161145, 493: 161146, 494: 161147, 495: 161148, 496: 161149, 497: 161150, 498: 161151, 499: 161152, 500: 161153, 501: 161154, 502: 161155, 503: 161156, 504: 161157, 505: 161158, 506: 161159, 507: 161160, 508: 161161, 509: 161162, 510: 161163, 511: 161164, 512: 161165, 513: 161166, 514: 161167, 515: 161168, 516: 161169, 517: 161170, 518: 161171, 519: 161172, 520: 161173, 521: 161174, 522: 161175, 523: 161176, 524: 161177, 525: 161178, 526: 161179, 527: 161180, 528: 161181, 529: 161182, 530: 161183, 531: 161184, 532: 161185, 533: 161186, 534: 161187, 535: 161188, 536: 161189, 537: 161190, 538: 161191, 539: 161192, 540: 161193, 541: 161194, 542: 161195, 543: 161196, 544: 161197, 545: 161198, 546: 161199, 547: 161200, 548: 161201, 549: 161202, 550: 161203, 551: 161204, 552: 161205, 553: 161206, 554: 161207, 555: 161208, 556: 161209, 557: 161210, 558: 161211, 559: 161212, 560: 161213, 561: 161214, 562: 161215, 563: 161216, 564: 161217, 565: 161218, 566: 161219, 567: 161220, 568: 161221, 569: 161222, 570: 161223, 571: 161224, 572: 161225, 573: 161226, 574: 161227, 575: 161228, 576: 161229, 577: 161230, 579: 161231, 580: 161232, 581: 161233, 582: 161234, 583: 161235, 584: 161236, 585: 161237, 586: 161238, 587: 161239, 588: 161240, 589: 161241, 590: 161242, 591: 161243, 592: 161244, 593: 161245, 594: 161246, 595: 161247, 596: 161248, 597: 161249, 598: 161250, 599: 161251, 600: 161252, 601: 161253, 602: 161254, 603: 161255, 604: 161256, 605: 161257, 606: 161258, 607: 161259, 608: 161260, 609: 161261, 610: 161262, 611: 161263, 612: 161264, 613: 161265, 614: 161266, 615: 161267, 616: 161268, 617: 161269, 618: 161270, 619: 161271, 620: 161272, 621: 161273, 622: 161274, 623: 161275, 624: 161276, 625: 161277, 626: 161278, 628: 161279, 629: 161280, 630: 161281, 631: 161282, 632: 161283, 633: 161284, 634: 161285, 635: 161286, 636: 161287, 637: 161288, 638: 161289, 639: 161290, 640: 161291, 641: 161292, 642: 161293, 643: 161294, 644: 161295, 645: 161296, 646: 161297, 647: 161298, 648: 161299, 649: 161300, 650: 161301, 651: 161302, 652: 161303, 653: 161304, 654: 161305, 655: 161306, 656: 161307, 657: 161308, 658: 161309, 659: 161310, 660: 161311, 661: 161312, 662: 161313, 663: 161314, 664: 161315, 665: 161316, 666: 161317, 667: 161318, 668: 161319, 669: 161320, 670: 161321, 671: 161322, 672: 161323, 673: 161324, 674: 161325, 675: 161326, 676: 161327, 677: 161328, 678: 161329, 679: 161330, 680: 161331, 681: 161332, 682: 161333, 683: 161334, 684: 161335, 685: 161336, 686: 161337, 687: 161338, 688: 161339, 689: 161340, 690: 161341, 691: 161342, 692: 161343, 693: 161344, 694: 161345, 695: 161346, 696: 161347, 697: 161348, 698: 161349, 699: 161350, 700: 161351, 701: 161352, 702: 161353, 703: 161354, 704: 161355, 705: 161356, 706: 161357, 707: 161358, 708: 161359, 709: 161360, 710: 161361, 711: 161362, 712: 161363, 713: 161364, 714: 161365, 715: 161366, 716: 161367, 717: 161368, 718: 161369, 719: 161370, 720: 161371, 721: 161372, 722: 161373, 723: 161374, 724: 161375, 725: 161376, 726: 161377, 727: 161378, 728: 161379, 729: 161380, 730: 161381, 731: 161382, 732: 161383, 733: 161384, 734: 161385, 735: 161386, 736: 161387, 737: 161388, 738: 161389, 739: 161390, 740: 161391, 741: 161392, 742: 161393, 743: 161394, 744: 161395, 745: 161396, 746: 161397, 747: 161398, 748: 161399, 749: 161400, 750: 161401, 751: 161402, 752: 161403, 753: 161404, 754: 161405, 755: 161406, 756: 161407, 757: 161408, 758: 161409, 759: 161410, 760: 161411, 761: 161412, 762: 161413, 763: 161414, 764: 161415, 765: 161416, 766: 161417, 767: 161418, 768: 161419, 769: 161420, 770: 161421, 771: 161422, 772: 161423, 773: 161424, 774: 161425, 775: 161426, 776: 161427, 777: 161428, 778: 161429, 779: 161430, 780: 161431, 781: 161432, 782: 161433, 783: 161434, 784: 161435, 785: 161436, 786: 161437, 787: 161438, 788: 161439, 789: 161440, 790: 161441, 791: 161442, 792: 161443, 793: 161444, 794: 161445, 795: 161446, 796: 161447, 797: 161448, 798: 161449, 799: 161450, 800: 161451, 801: 161452, 802: 161453, 803: 161454, 804: 161455, 805: 161456, 806: 161457, 807: 161458, 808: 161459, 809: 161460, 810: 161461, 811: 161462, 812: 161463, 813: 161464, 814: 161465, 815: 161466, 816: 161467, 817: 161468, 818: 161469, 819: 161470, 820: 161471, 821: 161472, 822: 161473, 823: 161474, 824: 161475, 825: 161476, 826: 161477, 827: 161478, 828: 161479, 829: 161480, 830: 161481, 831: 161482, 832: 161483, 833: 161484, 834: 161485, 835: 161486, 836: 161487, 837: 161488, 838: 161489, 839: 161490, 840: 161491, 841: 161492, 842: 161493, 843: 161494, 844: 161495, 845: 161496, 846: 161497, 847: 161498, 848: 161499, 849: 161500, 850: 161501, 851: 161502, 852: 161503, 853: 161504, 854: 161505, 855: 161506, 856: 161507, 857: 161508, 858: 161509, 859: 161510, 860: 161511, 861: 161512, 862: 161513, 863: 161514, 864: 161515, 865: 161516, 866: 161517, 867: 161518, 868: 161519, 869: 161520, 870: 161521, 871: 161522, 872: 161523, 873: 161524, 874: 161525, 875: 161526, 876: 161527, 877: 161528, 878: 161529, 879: 161530, 880: 161531, 881: 161532, 882: 161533, 883: 161534, 884: 161535, 885: 161536, 886: 161537, 887: 161538, 888: 161539, 889: 161540, 890: 161541, 891: 161542, 892: 161543, 893: 161544, 894: 161545, 895: 161546, 896: 161547, 897: 161548, 898: 161549, 899: 161550, 900: 161551, 901: 161552, 902: 161553, 903: 161554, 904: 161555, 905: 161556, 906: 161557, 907: 161558, 908: 161559, 909: 161560, 910: 161561, 911: 161562, 912: 161563, 913: 161564, 914: 161565, 915: 161566, 916: 161567, 917: 161568, 918: 161569, 919: 161570, 920: 161571, 921: 161572, 922: 161573, 923: 161574, 924: 161575, 925: 161576, 926: 161577, 927: 161578, 928: 161579, 929: 161580, 930: 161581, 931: 161582, 932: 161583, 933: 161584, 934: 161585, 935: 161587, 936: 161588, 937: 161589, 938: 161590, 939: 161591, 940: 161592, 941: 161593, 942: 161594, 943: 161595, 944: 161596, 945: 161597, 946: 161598, 947: 161599, 948: 161600, 949: 161601, 950: 161602, 951: 161603, 952: 161604, 953: 161605, 954: 161606, 955: 161607, 956: 161608, 957: 161609, 958: 161610, 959: 161611, 960: 161612, 961: 161613, 962: 161614, 963: 161615, 964: 161616, 965: 161617, 966: 161618, 967: 161619, 968: 161620, 969: 161621, 970: 161622, 971: 161623, 972: 161624, 973: 161625, 974: 161626, 975: 161627, 976: 161628, 977: 161629, 978: 161630, 979: 161631, 980: 161632, 981: 161633, 982: 161634, 983: 161635, 984: 161636, 985: 161637, 986: 161638, 988: 161639, 989: 161640, 990: 161641, 991: 161642, 992: 161643, 993: 161644, 994: 161645, 995: 161646, 996: 161647, 997: 161648, 998: 161649, 999: 161650, 1000: 161651, 1001: 161652, 1002: 161653, 1003: 161654, 1004: 161655, 1005: 161656, 1006: 161657, 1007: 161658, 1008: 161659, 1009: 161660, 1010: 161661, 1011: 161662, 1012: 161663, 1013: 161664, 1014: 161665, 1015: 161666, 1016: 161667, 1017: 161668, 1018: 161669, 1019: 161670, 1020: 161671, 1021: 161672, 1022: 161673, 1023: 161674, 1024: 161675, 1025: 161676, 1026: 161677, 1027: 161678, 1028: 161679, 1029: 161680, 1030: 161681, 1031: 161682, 1032: 161683, 1033: 161684, 1034: 161685, 1035: 161686, 1036: 161687, 1037: 161688, 1038: 161689, 1039: 161690, 1040: 161691, 1041: 161692, 1042: 161693, 1043: 161694, 1044: 161695, 1045: 161696, 1046: 161697, 1047: 161698, 1048: 161699, 1049: 161700, 1050: 161701, 1051: 161702, 1052: 161703, 1053: 161704, 1054: 161705, 1055: 161706, 1056: 161707, 1057: 161708, 1058: 161709, 1059: 161710, 1060: 161711, 1061: 161712, 1062: 161713, 1063: 161714, 1064: 161715, 1065: 161716, 1066: 161717, 1067: 161718, 1068: 161719, 1069: 161720, 1070: 161721, 1071: 161722, 1072: 161723, 1073: 161724, 1074: 161725, 1075: 161726, 1076: 161727, 1077: 161728, 1078: 161729, 1079: 161730, 1080: 161731, 1081: 161732, 1082: 161733, 1083: 161734, 1084: 161735, 1085: 161736, 1086: 161737, 1087: 161738, 1088: 161739, 1089: 161740, 1090: 161741, 1091: 161742, 1092: 161743, 1093: 161744, 1094: 161745, 1095: 161746, 1096: 161747, 1097: 161748, 1098: 161749, 1099: 161750, 1100: 161751, 1101: 161752, 1102: 161753, 1103: 161754, 1104: 161755, 1105: 161756, 1106: 161757, 1107: 161758, 1108: 161759, 1109: 161760, 1110: 161761, 1111: 161762, 1112: 161763, 1113: 161764, 1114: 161765, 1115: 161766, 1116: 161767, 1117: 161768, 1118: 161769, 1119: 161770, 1120: 161771, 1121: 161772, 1122: 161773, 1123: 161774, 1124: 161775, 1125: 161776, 1126: 161777, 1127: 161778, 1128: 161779, 1129: 161780, 1130: 161781, 1131: 161782, 1132: 161783, 1133: 161784, 1134: 161785, 1135: 161786, 1136: 161787, 1137: 161788, 1138: 161789, 1139: 161790, 1140: 161791, 1141: 161792, 1142: 161793, 1143: 161794, 1144: 161795, 1145: 161796, 1146: 161797, 1147: 161798, 1148: 161799, 1149: 161800, 1150: 161801, 1151: 161802, 1152: 161803, 1153: 161804, 1154: 161805, 1155: 161806, 1156: 161807, 1157: 161808, 1158: 161809, 1159: 161810, 1160: 161811, 1161: 161812, 1162: 161813, 1163: 161814, 1164: 161815, 1165: 161816, 1166: 161817, 1167: 161818, 1168: 161819, 1169: 161820, 1170: 161821, 1171: 161822, 1172: 161823, 1173: 161824, 1174184470: 161825, 1175: 161826, 1176: 161827, 1177: 161828, 1178: 161829, 1179: 161830, 1180: 161831, 1181: 161832, 1182: 161833, 1183: 161834, 1184: 161835, 1185: 161836, 1186: 161837, 1187: 161838, 1188: 161839, 1189: 161840, 1190: 161841, 1191: 161842, 1192: 161843, 1193: 161844, 1194: 161845, 1195: 161846, 1196: 161847, 1197: 161848, 1198: 161849, 1199: 161850, 1200: 161851, 1201: 161852, 1202: 161853, 1203: 161854, 1204: 161855, 1205: 161856, 1206: 161857, 1207: 161858, 1208: 161859, 1209: 161860, 1210: 161861, 1211: 161862, 1212: 161863, 1213: 161864, 1214: 161865, 1215: 161866, 1216: 161867, 1217: 161868, 1218: 161869, 1219: 161870, 1220: 161871, 1221: 161872, 1222: 161873, 1223: 161874, 1224: 161875, 1225: 161876, 1226: 161877, 1227: 161878, 1228: 161879, 1229: 161880, 1230: 161881, 1231: 161882, 1232: 161883, 1233: 161884, 1234: 161885, 1235: 161886, 1236: 161887, 1237: 161888, 1238: 161889, 1239: 161890, 1240: 161891, 1241: 161892, 1243: 161893, 1244: 161894, 1245: 161895, 1246: 161896, 1247: 161897, 1248: 161898, 1249: 161899, 1250: 161900, 1251: 161901, 1252: 161902, 1253: 161903, 1254: 161904, 1255: 161905, 1256: 161906, 1257: 161907, 1258: 161908, 1259: 161909, 1260: 161910, 1261: 161911, 1262: 161912, 1263: 161913, 1264: 161914, 1265: 161915, 1266: 161916, 1267: 161917, 1268: 161918, 1269: 161919, 1270: 161920, 1271: 161921, 1272: 161922, 1273: 161923, 1274: 161924, 1275: 161925, 1276: 161926, 1277: 161927, 1278: 161928, 1279: 161929, 1280: 161930, 1281: 161931, 1282: 161932, 1283: 161933, 1284: 161934, 1285: 161935, 1286: 161936, 1287: 161937, 1288: 161938, 1289: 161939, 1290: 161940, 1291: 161941, 1292: 161942, 1293: 161943, 1294: 161944, 1295: 161945, 1296: 161946, 1297: 161947, 1298: 161948, 1299: 161949, 1300: 161950, 1301: 161951, 1302: 161952, 1303: 161953, 1304: 161954, 1305: 161955, 1306: 161956, 1307: 161957, 1308: 161958, 1309: 161959, 1310: 161960, 1311: 161961, 1312: 161962, 1313: 161963, 1314: 161964, 1315: 161965, 1316: 161966, 1317: 161967, 1318: 161968, 1319: 161969, 1320: 161970, 1321: 161971, 1322: 161972, 1323: 161973, 1324: 161974, 1325: 161975, 1326: 161976, 1327: 161977, 1328: 161978, 1329: 161979, 1330: 161980, 1331: 161981, 1332: 161982, 1333: 161983, 1334: 161984, 1335: 161985, 1336: 161986, 1337: 161987, 1338: 161988, 1339: 161989, 1340: 161990, 1341: 161991, 1342: 161992, 1343: 161993, 1344: 161994, 1345: 161995, 1346: 161996, 1348: 161997, 1349: 161998, 1350: 161999, 1351: 162000, 1352: 162001, 1353: 162002, 1354: 162003, 1355: 162004, 1356: 162005, 1357: 162006, 1358: 162007, 1359: 162008, 1360: 162009, 1361: 162010, 1362: 162011, 1363: 162012, 1364: 162013, 1365: 162014, 1366: 162015, 1367: 162016, 1368: 162017, 1369: 162018, 1370: 162019, 1371: 162020, 1372: 162021, 1373: 162022, 1374: 162023, 1375: 162024, 1376: 162025, 1377: 162026, 1378: 162027, 1379: 162028, 1380: 162029, 1381: 162030, 1382: 162031, 1383: 162032, 1384: 162033, 1385: 162034, 1386: 162035, 1387: 162036, 1388: 162037, 1389: 162038, 1390: 162039, 1391: 162040, 1392: 162041, 1393: 162042, 1394: 162043, 1395: 162044, 1396: 162045, 1397: 162046, 1398: 162047, 1399: 162048, 1400: 162049, 1401: 162050, 1402: 162051, 1403: 162052, 1404: 162053, 1405: 162054, 1406: 162055, 1407: 162056, 1408: 162057, 1409: 162058, 1410: 162059, 1411: 162060, 1412: 162061, 1413: 162062, 1414: 162063, 1415: 162064, 1416: 162065, 1417: 162066, 1418: 162067, 1419: 162068, 1420: 162069, 1421: 162070, 1422: 162071, 1423: 162072, 1424: 162073, 1425: 162074, 1426: 162075, 1427: 162076, 1428: 162077, 1429: 162078, 1430: 162079, 1431: 162080, 1432: 162081, 1433: 162082, 1434: 162083, 1435: 162084, 1436: 162085, 1437: 162086, 1438: 162087, 1439: 162088, 1440: 162089, 1441: 162090, 1442: 162091, 1443: 162092, 1444: 162093, 1445: 162094, 1446: 162095, 1447: 162096, 1448: 162097, 1449: 162098, 1450: 162099, 1451: 162100, 1452: 162101, 1455: 162102, 1456: 162103, 1457: 162104, 1458: 162105, 1459: 162106, 1461: 162107, 1464: 162108, 1465: 162109, 1466: 162110, 1467: 162111, 1469: 162113, 1472: 162114, 1473: 162115, 1474: 162116
           }




    map_get = map_post #{143: 184470}#{271:152751, 1: 152685, 259: 152686, 5: 152731, 774: 152688, 1409: 152719, 172: 152725, 273: 152690, 13: 152743, 14: 152689, 15: 152745, 16: 152746, 17: 152747, 147: 152721, 174: 152726, 27: 152691, 1440: 152723, 35: 152692, 37: 152693, 169: 152724, 299: 152732, 44: 152695, 45: 152696, 46: 152733, 47:152698, 48: 152734, 49: 152700, 50: 152701, 51: 152702, 52: 152703, 53: 152704, 54: 152730, 55: 152706, 246: 152736, 327: 152707, 332: 152708, 75: 152741, 204: 152727, 210: 152728, 85: 152748, 86: 152749, 1407: 152718, 142: 152735, 105: 152739, 106: 152740, 619: 152709, 109: 152742, 110: 152744, 111: 152750, 112: 152737, 113: 152738, 114: 152710, 115: 152711, 118: 152712, 1402: 152713, 1403: 152714, 1404: 152715, 1405: 152716, 1406: 152717, 661: 152722}


    # ssn_sheets = [1409, 259, 774, 44, 142, 147, 174, 27, 1440, 35, 37, 169, 172, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 246, 327, 332, 204, 1407, 619, 114, 115, 118, 1402, 1403, 1404, 1405, 1406, 661]

    # ssn_sheets = [76, 594, 603, 1117, 1119, 99, 101, 956, 619, 620, 109, 1136, 118, 119, 120, 1145, 638, 1153, 648, 1164, 662, 663, 1220, 160, 677, 1195, 607, 689, 1204, 181, 182, 183, 696, 187, 191, 704, 708, 734, 737, 230, 1263, 755, 757, 759, 762, 259, 261, 784, 797, 289, 809, 298, 814, 816, 1416, 314, 829, 838, 857, 353, 354, 365, 879, 368, 884, 1404, 392, 906, 908, 1432, 410, 411, 1439, 1442, 923, 423, 425, 426, 941, 1464, 1465, 1468, 957, 1473, 1474, 964, 1478, 463, 250, 479, 482, 1015]

    # sheets = [151214, 151293, 151343, 151346, 151348, 151378, 151432, 151500, 151505, 151794, 151948, 152589, 152590, 152591, 152592, 152593, 152594, 152728, 152729, 152730, 152731, 152732, 152733, 152734, 152735, 152736, 152737, 152738, 152739, 152825, 152928, 151322, 151204, 151289, 151290, 151835, 152627, 152596]
    sheets = [153054, 153055, 153056, 153057, 153058, 153059, 153060, 153061, 153062, 153063, 153064, 153065, 153066, 153067, 153068, 153069, 153070, 153071, 153072, 153073, 153074, 153075, 153076, 153077, 153078, 153079, 153080, 153081, 153082, 153083, 153084, 153085, 153086, 153087, 153088, 153089, 153090, 153091, 153092, 153093, 153094, 153095, 153096, 153097, 153098]



    bi = [1, 259, 204, 774, 1409, 172, 332, 14, 115, 273, 210, 147, 661, 27, 1402, 1440, 35, 37, 169, 327, 44, 45, 174, 47, 619, 49, 50, 51, 52, 53, 118, 55, 114, 1403, 1404, 1405, 1406, 1407]

    QA = [143]  # [1, 259, 5, 774, 13, 14, 15, 16, 273, 27, 35, 37, 299, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 327, 75, 332, 85, 86, 17, 105, 106, 619, 109, 110, 111, 112, 113, 114, 115, 118, 1402, 1403, 1404, 1405, 1406, 1407, 1409, 142, 147, 661, 1440, 169, 172, 174, 204, 210, 246]

    for sheet_ssn in QA: # bi #[35, 246, 169, 45, 142, 48, 115, 51, 52, 174, 118, 27, 53]: #range(418,1478):  # id or ssn_sheet number
        post_btween_sandboxes(ssn=sheet_ssn, map_ssn_url_get=map_get, map_ssn_url_post=map_post, pdf_action='add', new_post=False)
    # for sheet_id in sheets:
    #     post_btween_sandboxes(id=sheet_id) #, new_post=True)#map_ssn_url_get=map_get, map_ssn_url_post=map_post, new_post=True)

    # tochange = db.sheets.find({"id":1158})
    # for olddoc in tochange:
    #     newdoc = db.sheets.find_one({"id":1460})
    #     newdoc = change_sheet(newdoc, add_tags=[],
    #                           del_tags=["UI", 'int_tag', 'Hebrew Sheet', 'Merged', 'Bilingual', 'Edited', 'Linked'],
    #                           pdf_action='add')
    #     # del newdoc['_id']
    #     db.sheets.update({'_id': olddoc["_id"]}, newdoc)
    # for olddoc in tochange:
    #     newdoc = change_sheet(olddoc, add_tags=[], del_tags=["UI", 'int_tag', 'Hebrew Sheet', 'Merged', 'Bilingual', 'Edited', 'Linked'], pdf_action='add')
    #     db.sheets.update({'_id': olddoc["_id"]}, newdoc)


#done: [152685, 152686, 152687, 152688, 152689, 152690, 152691, 152692, 152693, 152694]
# [152695, 152696, 152697, 152698, 152699, 152700, 152701, 152702, 152703, 152704, 152705, 152706, 152707, 152708, 152709, 152710, 152712, 152713, 152714, 152715, 152716, 152717, 152718, 152720, 152721, 152722, 152723, 152724, 152725, 152726, 152727, 152728, 152730, 152731, 152733, 152734, 152738, 152739, 152740, 152741, 152742, 152743, 152744, 152745, 152746, 152747, 152748, 152749, 152750, 152751, 152752, 152753, 152754, 152755, 152756, 152757, 152758, 152759, 152760, 152761, 152762, 152763, 152764, 152765, 152766, 152767, 152768, 152769, 152770, 152771, 152772, 152773, 152774, 152775, 152776, 152777, 152778, 152779, 152780, 152781, 152782, 152783, 152784, 152785, 152786, 152787, 152788, 152789, 152790, 152791]
# [152792, 152793, 152794, 152795, 152796, 152798, 152799, 152801, 152802, 152803, 152804, 152805, 152806, 152807, 152808, 152809, 152810, 152811, 152812, 152813, 152814, 152815, 152816, 152817, 152818, 152819, 152820, 152821, 152822, 152823, 152825, 152826, 152827, 152828, 152829, 152830, 152831, 152832, 152833, 152834, 152835, 152836, 152837, 152838, 152839, 152840, 152841, 152842, 152843, 152844, 152845, 152846, 152847, 152848, 152849, 152850, 152852, 152853, 152854, 152855, 152857, 152858, 152859, 152860, 152861, 152862, 152863, 152864, 152865, 152866, 152867, 152868, 152869, 152870, 152871, 152872, 152873, 152874, 152875, 152876, 152877, 152878, 152879, 152880, 152881, 152882, 152883, 152884, 152885, 152886, 152887, 152888, 152889, 152890, 152891, 152892, 152893, 152894, 152895, 152896]
# [152897, 152898, 152899, 152900, 152901, 152902, 152903, 152904, 152905, 152906, 152907, 152908, 152909, 152910, 152911, 152912, 152913, 152914, 152915, 152916, 152917, 152918, 152919, 152920, 152921, 152922, 152923, 152924, 152925, 152926, 152928, 152929, 152930, 152931, 152932, 152933, 152934, 152935, 152936, 152937, 152938, 152939, 152940, 152941, 152942, 152943, 152944, 152945, 152946, 152947, 152948, 152949, 152950, 152951, 152952, 152953, 152954, 152955, 152956, 152957, 152958, 152959, 152960, 152961, 152962, 152963, 152964, 152965, 152966, 152967, 152968, 152969, 152970, 152971, 152972, 152973, 152974, 152975, 152976, 152978, 152979, 152980, 152981, 152982, 152983, 152984, 152985, 152986, 152987, 152988, 152989, 152990, 152991, 152992, 152993, 152994, 152995, 152996, 152997, 152998, 152999, 153000, 153001, 153002, 153003, 153004, 153005, 153006, 153007, 153008, 153009, 153010, 153011, 153012, 153013, 153014, 153015, 153016, 153017, 153018, 153019, 153020, 153021, 153022, 153023, 153024, 153025, 153026, 153027, 153028, 153029, 153030, 153031, 153032,153033, 153034, 153035, 153036, 153037, 153038, 153039, 153040, 153041, 153042, 153043, 153044, 153045, 153046, 153047, 153048, 153049, 153050, 153051, 153052, 153053,]
# Delete duplicates
# for sheet_id in range(151200, 151843):
#     sheets = db.sheets.count_documents({'id': sheet_id})
#     if sheets > 1:
#         print sheet_id
#         cursor = db.sheets.find({'id': sheet_id})
#         for s in cursor:
#             db.sheets.remove(s)
#             break